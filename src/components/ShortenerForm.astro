---
import Input from '@/components/ui/Input.astro';
import Action from '@/components/ui/Action.astro';
import { checkAuth } from '@/lib/get-auth';
import Typography from './ui/Typography.astro';

const isAuthenticated = await checkAuth({ cookies: Astro.cookies });
---

<form
  id="snap-link-form"
  class="flex flex-col gap-2"
  method="post"
  action="/api/link"
>
  <Input
    label="Link"
    class="flex-1"
    type="url"
    name="link"
    required
    placeholder="https://example.com"
  />
  <Input
    label="Alias (optional)"
    class="flex-1"
    type="text"
    name="alias"
    placeholder="custom-alias"
  />
  <Input
    id="public-link"
    label="List in public links"
    name="public"
    class="flex-1"
    type="checkbox"
    title={isAuthenticated
      ? ''
      : 'You need to be logged in to make a link public'}
    disabled={!isAuthenticated}
    switch
  />
  <Action as="button" type="submit">Snap link</Action>
  <Typography id="snap-link-message" as="p" class="hidden text-red-200" />
  <Typography id="snap-link-url" as="p" class="hidden text-teal-200" />
  <div id="qr-code-container" class="hidden flex-col items-center self-center">
    <div id="qr-code"></div>
    <Action as="button" id="download-qr-code" aria-label="Download QR code">
      Download QR code
    </Action>
  </div>
</form>
<script>
  import confetti from 'canvas-confetti';
  import { generateQRCode } from '@/lib/generate-qr-code';

  const form = document.getElementById('snap-link-form') as HTMLFormElement;
  const message = document.getElementById(
    'snap-link-message'
  ) as HTMLButtonElement;
  const urlButton = document.getElementById(
    'snap-link-url'
  ) as HTMLButtonElement;
  const qrCodeContainer = document.getElementById(
    'qr-code-container'
  ) as HTMLDivElement;
  const qrCode = document.getElementById('qr-code') as HTMLDivElement;
  const downloadQrCode = document.getElementById(
    'download-qr-code'
  ) as HTMLButtonElement;

  const handleSubmit = async (e: SubmitEvent) => {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);
    const response = await fetch(form.action, {
      method: form.method,
      body: formData,
    });
    if (!response.ok) {
      urlButton.classList.add('hidden');
      qrCodeContainer.style.display = 'none';
      message.textContent = await response.text();
      message.classList.remove('hidden');
      return;
    }
    const { title, public: isPublic } = (await response.json()) as {
      title: string;
      public: boolean;
    };

    urlButton.textContent = `Link created. You can access it at `;
    const a = document.createElement('a');
    const url = new URL(window.location.href);
    url.pathname = `/l/${title}`;
    a.href = url.toString();
    a.textContent = url.toString();
    a.style.textDecoration = 'underline';
    urlButton.appendChild(a);
    urlButton.classList.remove('hidden');

    if (isPublic) {
      const publicLinks = document.getElementById(
        'public-links'
      ) as HTMLTableRowElement;
      const tr = document.createElement('tr');

      const tdTitle = document.createElement('td');
      tdTitle.classList.add('h-20');
      tdTitle.textContent = title;
      tdTitle.classList.add('text-center');
      tr.appendChild(tdTitle);

      const tdLink = document.createElement('td');
      const a = document.createElement('a');
      a.href = url.toString();
      a.textContent = `snap-link.vercel.app/l/${title}`;
      a.classList.add('underline');
      tdLink.appendChild(a);
      tr.appendChild(tdLink);

      publicLinks.appendChild(tr);
    }

    qrCode.innerHTML = '';
    const qrcode = generateQRCode({ linkTitle: title });
    qrcode.append(qrCode);
    qrCodeContainer.style.display = 'flex';

    form.reset();
    confetti();
  };
  form?.addEventListener('submit', handleSubmit);

  const drawBackground = ({
    image,
    canvas,
    context,
  }: {
    image: HTMLImageElement;
    canvas: HTMLCanvasElement;
    context: CanvasRenderingContext2D;
  }) => {
    canvas.width = image.width;
    canvas.height = image.height;
    context.fillStyle = 'white';
    context.fillRect(0, 0, canvas.width, canvas.height);
  };

  const downloadQRCode = () => {
    const svg = qrCode.querySelector('svg');
    if (!svg) return;
    const svgData = new XMLSerializer().serializeToString(svg);
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    const img = new Image();

    img.onload = () => {
      drawBackground({ image: img, canvas, context: ctx });
      ctx.drawImage(img, 0, 0);
      const a = document.createElement('a');
      a.href = canvas.toDataURL('image/png');
      a.download = 'qr-code.png';
      a.click();
    };
    img.src = `data:image/svg+xml;base64,${btoa(svgData)}`;
  };
  downloadQrCode?.addEventListener('click', downloadQRCode);
</script>
