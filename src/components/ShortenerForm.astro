---
import { db, Links } from 'astro:db';
import { z } from 'zod';
import Input from '@/components/ui/Input.astro';
import Action from '@/components/ui/Action.astro';
import { checkAuth, getUser } from '@/lib/get-auth';
import { generateUniqueAlias } from '@/lib/generate-unique-alias';
import Typography from './ui/Typography.astro';
import { eq } from 'astro:db';
import { Users } from 'astro:db';

const linkSchema = z.object({
  link: z.string().url(),
  public: z.enum(['on', 'off']).optional(),
  alias: z.string().optional(),
});

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const data = Object.fromEntries(formData);
  try {
    const { link, public: isPublic, alias } = linkSchema.parse(data);
    const user = await getUser({ cookies: Astro.cookies });
    const [{userId}] = await db
      .select()
      .from(Links)
      .where(eq(Users.email, user?.email ?? ''));
    let newAlias = alias;
    if (!alias) {
      const links = await db.select().from(Links);
      newAlias = generateUniqueAlias(links.map((link) => link.title));
      console.log(newAlias);
    }
    if (isPublic === 'on') {
      if (!user) {
        return new Response('Unauthorized', { status: 401 });
      }
    }
    await db.insert(Links).values({
      title: newAlias as string,
      url: link,
      public: isPublic === 'on',
      userId
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return new Response('Invalid data', { status: 400 });
    }
    return new Response('An error ocurred', { status: 500 });
  }
}

const isAuthenticated = await checkAuth({ cookies: Astro.cookies });
---

<form id="snap-link-form" class="flex flex-col gap-4" method="post">
  <Input
    label="Link"
    class="flex-1"
    type="url"
    name="link"
    required
    placeholder="https://example.com"
  />
  <Input
    label="Alias (optional)"
    class="flex-1"
    type="text"
    name="alias"
    placeholder="custom-alias"
  />
  <Input
    id="public-link"
    label="List in public links"
    name="public"
    class="flex-1"
    type="checkbox"
    title={isAuthenticated
      ? ''
      : 'You need to be logged in to make a link public'}
    disabled={!isAuthenticated}
    switch
  />
  <Typography id="snap-link-message" as="p" class="hidden text-red-200" />
  <Action as="button" type="submit">Snap link</Action>
</form>
<script>
  import confetti from 'canvas-confetti';

  const form = document.getElementById('snap-link-form') as HTMLFormElement;
  const message = document.getElementById(
    'snap-link-message'
  ) as HTMLButtonElement;

  const handleSubmit = async (e: SubmitEvent) => {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);
    const response = await fetch(form.action, {
      method: form.method,
      body: formData,
    });
    if (!response.ok) {
      message.textContent = 'Invalid data';
      message.classList.remove('hidden');
      return;
    }
    form.reset();
    confetti();
  };
  form?.addEventListener('submit', handleSubmit);
</script>
