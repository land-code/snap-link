---
import { db, Users, Links, eq } from 'astro:db';
import Action from '@/components/ui/Action.astro';
import Input from '@/components/ui/Input.astro';
import Typography from '@/components/ui/Typography.astro';
import Layout from '@/layouts/Layout.astro';
import { getUser } from '@/lib/get-auth';

import EditIcon from '@/icons/Edit.astro';
import CheckIcon from '@/icons/Check.astro';

const { linkTitle } = Astro.params;
if (!linkTitle) return Astro.redirect('/');

const [link] = await db.select().from(Links).where(eq(Links.title, linkTitle));
const { url, userId } = link;

let isOwner = false;

if (userId) {
  const user = getUser({ cookies: Astro.cookies });
  const userDb = db.select().from(Users).where(eq(Users.id, userId));
  await Promise.all([user, userDb]).then(([user, [userDb]]) => {
    isOwner = user?.email === userDb.email;
  });
}
---

<Layout title={linkTitle}>
  <Typography as="h1" transition:name={`title-${linkTitle}`}
    >{linkTitle}</Typography
  >
  <div class="flex gap-2 items-baseline mb-2">
    <Typography
      id="link"
      as="a"
      variant="h2"
      class="block underline text-xl text-teal-300"
      href={url}
      transition:name={`link-${linkTitle}`}
    >
      {url}
    </Typography>
    <Action as="button" id="edit-link-button" variant="icon" hidden={!isOwner}>
      <EditIcon id="edit-icon" />
    </Action>
  </div>
  <form id="link-edit-form" class="hidden gap-2 items-baseline mb-2">
    <Input
      name="link-input"
      class="text-lg w-max"
      transition:name={`link-${linkTitle}`}
      value={url}
    />
    <Action
      as="button"
      type="submit"
      id="submit-link-button"
      variant="icon"
      hidden={!isOwner}
    >
      <CheckIcon id="check-icon" />
    </Action>
  </form>
  <div class="flex gap-2 items-center">
    <Action as="button" id="generate-qr-code"> Generate QR Code </Action>
    <Action id="copy-link-button" as="button"> Copy link </Action>
    <Action
      data-link={linkTitle}
      id="delete-link-button"
      as="button"
      hidden={!isOwner}
    >
      Delete link
    </Action>
    <div class="mt-2" id="qr-code-area" class="hidden"></div>
    <div id="modify-qr-code" class="hidden mt-4">
      <Action available={false} as="button" disabled>
        Customize your QR Code
      </Action>
      <Typography as="p" class="text-teal-400">Available soon</Typography>
    </div>
  </div>
</Layout>
<script>
  import { generateQRCode } from '@/lib/generate-qr-code';
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    const copyLinkButton = document.getElementById(
      'copy-link-button'
    ) as HTMLButtonElement;
    const link = document.getElementById('link') as HTMLAnchorElement;
    const url = link.href;

    const copyLink = () => {
      navigator.clipboard.writeText(url);
      const beforeText = copyLinkButton.textContent;
      copyLinkButton.textContent = 'Copiado!';
      copyLinkButton.disabled = true;
      setTimeout(() => {
        copyLinkButton.textContent = beforeText;
        copyLinkButton.disabled = false;
      }, 1000);
    };

    const generateQRCodeButton = document.getElementById(
      'generate-qr-code'
    ) as HTMLButtonElement;
    const qrCodeArea = document.getElementById(
      'qr-code-area'
    ) as HTMLDivElement;
    const modifyQRCodeButton = document.getElementById(
      'modify-qr-code'
    ) as HTMLButtonElement;

    const generateQR = () => {
      qrCodeArea.innerHTML = '';
      const qrCode = generateQRCode({
        linkTitle: '',
      });
      qrCode.append(qrCodeArea);
      qrCodeArea.classList.remove('hidden');
      modifyQRCodeButton.classList.remove('hidden');
    };
    const deleteLinkButton = document.getElementById(
      'delete-link-button'
    ) as HTMLAnchorElement;
    const title = deleteLinkButton.getAttribute('data-link') as string;
    const formData = new FormData();
    formData.append('title', title);

    const deleteLink = async () => {
      const response = await fetch(`/api/link?title=${title}`, {
        method: 'DELETE',
      });
      if (!response.ok) {
        alert('Error while deleting link');
        return;
      }
      navigate('/', {
        history: 'replace',
      });
    };

    const editLinkForm = document.getElementById(
      'link-edit-form'
    ) as HTMLFormElement;
    const editLinkButton = document.getElementById(
      'edit-link-button'
    ) as HTMLButtonElement;
    const submitLinkButton = document.getElementById(
      'submit-link-button'
    ) as HTMLButtonElement;
    const editIcon = document.getElementById('edit-icon') as HTMLButtonElement;

    const showTextbox = async () => {
      editLinkForm.classList.remove('hidden');
      link.classList.add('hidden');
      editIcon.classList.add('hidden');
      editLinkForm.style.display = 'flex';
    };

    const submitForm = async (e: SubmitEvent) => {
      e.preventDefault();

      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const newUrl = formData.get('link-input') as string;
      const actualUrl = link.textContent;

      if (!newUrl) return;
      if (newUrl === actualUrl) {
        editLinkForm.classList.add('hidden');
        link.classList.remove('hidden');
        editIcon.classList.remove('hidden');
        return;
      }

      submitLinkButton.disabled = true;
      const title = deleteLinkButton.getAttribute('data-link') as string;

      const url = new URL('/api/link', window.location.origin);
      url.searchParams.append('title', title);
      const response = await fetch(url.toString(), {
        method: 'PUT',
        body: formData,
      });

      submitLinkButton.disabled = false;

      if (!response.ok) {
        alert(response.text());
        return;
      }

      link.textContent = newUrl;
      link.href = newUrl;
      editLinkForm.style.display = 'none';
      link.classList.remove('hidden');
      editIcon.classList.remove('hidden');
    };

    copyLinkButton.addEventListener('click', copyLink);
    generateQRCodeButton.addEventListener('click', generateQR);
    deleteLinkButton.addEventListener('click', deleteLink);
    editLinkButton.addEventListener('click', showTextbox);
    editLinkForm.addEventListener('submit', submitForm);
  });
</script>
