---
import Layout from '@/layouts/Layout.astro';
import Input from '@/components/ui/Input.astro';
import Action from '@/components/ui/Action.astro';
import Typography from '@/components/ui/Typography.astro';
import { z } from 'zod';

const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const data = Object.fromEntries(formData);
  try {
    const { email, password } = loginSchema.parse(data);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return new Response('Invalid data', { status: 400 });
    }
    return new Response('Internal server error', { status: 500 });
  }
}
---

<Layout title="Login">
  <Typography as="h1">Login</Typography>
  <form
    id="login-form"
    action="/api/auth/signin"
    method="post"
    class="flex flex-col gap-4"
  >
    <Input label="Email" name="email" type="email" class="flex-1" required />
    <Input
      label="Password"
      name="password"
      type="password"
      class="flex-1"
      required
    />
    <Action id="login-form-submit" as="button">Login</Action>
    <Typography as="p" id="statusMessage" class="text-red-200" />
  </form>
</Layout>

<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
  } from 'firebase/auth';
  import { app } from '../firebase/client';
  import { FirebaseError } from 'firebase/app';

  const auth = getAuth(app);
  // Esto evitará que el navegador almacene los datos de sesión
  auth.setPersistence(inMemoryPersistence);

  const form = document.getElementById('login-form') as HTMLFormElement;
  const status = document.getElementById(
    'statusMessage'
  ) as HTMLParagraphElement;
  const button = document.getElementById(
    'login-form-submit'
  ) as HTMLButtonElement;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const email = formData.get('email')?.toString();
    const password = formData.get('password')?.toString();

    if (!email || !password) {
      return;
    }

    button.innerHTML = 'Logging...';
    button.disabled = true;

    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const idToken = await userCredential.user.getIdToken();
      const response = await fetch('/api/auth/signin', {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      });

      if (response.redirected) {
        window.location.assign(response.url);
      }
    } catch (error) {
      if (error instanceof FirebaseError) {
        if (error.code === 'auth/invalid-credential') {
          status.innerHTML = 'Invalid email or password';
        }
        console.error(error.code)
      }
    } finally {
      button.innerHTML = 'Login';
      button.disabled = false;
    }
  });
</script>
